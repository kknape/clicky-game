{"version":3,"sources":["components/Wrapper/index.js","components/Header/navBar.jsx","components/GameCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Nav","href","userMsg","score","topScore","GameCard","onClick","clicked","isClicked","id","shake","alt","name","src","image","App","state","cardInfo","handleIncrement","setState","gameWin","newCardReset","map","card","gameReset","sort","a","b","Math","random","console","log","increment","newCardInfo","newScore","length","this","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.184c75d7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","//Nav Bar component includes header style, game title, user message, score and top score\r\n\r\nimport React from \"react\";\r\nimport \"./navBar.css\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row sticky-top\">\r\n        <div className=\"col-sm navbar myNavBar\">\r\n          <li className=\"nav-item navbar-brand myTitle\">\r\n            <a href=\"/\">Get Clicky With It!</a>\r\n          </li>\r\n        </div>\r\n        <div className=\"col-sm navbar myNavBar\">\r\n          <li className=\"nav-item userMsg\">{props.userMsg}</li>\r\n        </div>\r\n        <div className=\"col-sm navbar myNavBar\">\r\n          <li className=\"nav-item score\">\r\n            Score: {props.score} | Top Score: {props.topScore}\r\n          </li>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","//Game Card component...\n//shows card image and\n//handles on click event...\n//Set is clicked to true and\n//if shake = true, apply the shake effect via css class\n\nimport React from \"react\";\nimport \"./style.css\";\n\nfunction GameCard(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"card\">\n        <div\n          onClick={() => props.clicked(props.isClicked, props.id)}\n          className={\"img-container\" + (props.shake ? \" shake\" : \"\")}\n        >\n          <img className=\"img-thumbnail\" alt={props.name} src={props.image} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GameCard;\n","//Main game logic\n\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Header/navBar\";\nimport GameCard from \"./components/GameCard\";\nimport cardInfo from \"./cardInfo.json\";\n\nclass App extends Component {\n  // state with the cardInfo json array, score, top score, user message and 'shake' state\n  state = {\n    cardInfo,\n    score: 0,\n    topScore: 0,\n    userMsg: \"Click an image to start the game!\",\n    shake: false\n  };\n\n  handleIncrement = () => {\n    // Use the setState method to update a component's state\n    this.setState({ clicked: true });\n  };\n\n  //if you guess all cards correctly, give user a Win message and reset the game\n  gameWin = () => {\n    let newCardReset = this.state.cardInfo.map(card => {\n      card.clicked = false;\n      return card;\n    });\n    this.setState({\n      cardInfo: [...newCardReset],\n      score: 0,\n      topScore: 0,\n      userMsg: \"You won! Click to play again.\",\n      shake: false\n    });\n  };\n\n  //if you guess incorrectly, the game is over\n  //reset clicked value to false\n  //reset shake value to false\n  //reset score to zero\n  //check to see if it's a \"top score\", if yes, update Top Score with the new score\n  //apply shake effect\n  //shuffle cards\n  gameReset = () => {\n    // reset all card \"clicked\" properties to false\n    let newCardReset = this.state.cardInfo.map(card => {\n      card.clicked = false;\n      return card;\n    });\n\n    // resort entire array of cards\n    newCardReset.sort(function(a, b) {\n      return 0.5 - Math.random();\n    });\n\n    this.setState(\n      {\n        cardInfo: [...newCardReset],\n        score: 0,\n        topScore: this.state.topScore,\n        userMsg: \"Incorrect Guess. Game Over.\",\n        shake: true\n      },\n      () => {\n        // see latest state changes in console\n        console.log(\"reset\", this.state);\n      }\n    );\n  };\n\n  //if you guess correctly (picking a card that has not yet been picked)\n  //change clicked state to true\n  //shuffle the cards\n  //add one point to the score\n  //show user message, \"That's correct!\"\n  //shake set to false\n\n  increment = (isClicked, id) => {\n    console.log(\"entering increment function \", isClicked, id);\n    if (isClicked === false) {\n      // update element in card array with \"clicked property as true\"\n      let newCardInfo = this.state.cardInfo;\n      newCardInfo[id].clicked = true;\n\n      // resort entire array of cards\n      newCardInfo.sort(function(a, b) {\n        return 0.5 - Math.random();\n      });\n\n      //add one point to the score\n      let newScore = this.state.score + 1;\n\n      // update react state\n      // 1) sorted newCardInfo with item clicked as true\n      // 2) show user message, \"That's correct!\"\n      // 3) score with addition of 1 point\n      // 4) shake set to false\n\n      this.setState(\n        {\n          cardInfo: [...newCardInfo],\n          userMsg: \"Correct guess!\",\n          score: newScore,\n          shake: false\n        },\n        () => {\n          // see latest state changes in console\n          console.log(\"guessed correctly\", this.state);\n        }\n      );\n\n      //if all cards guessed correctly, run gameWin function\n      if (newScore === cardInfo.length) {\n        this.gameWin();\n      }\n\n      //if user guesses correctly add one point to the score\n      else if (newScore >= this.state.topScore) {\n        this.setState({ topScore: newScore });\n      }\n    }\n    //if user guesses incorrectly, run gameReset function\n    else {\n      this.gameReset();\n    }\n  };\n\n  //Render will...\n  //Run Wrapper component\n  //Run Nav component\n  //dynamically shows the User Message, Score and Top Score based on game play\n  // Map over this.state.friends and render the GameCard component for each friend object\n  //Running the Game Card component...\n  //Shows the card\n  //Captures the click of a given card\n  //Sets state to True\n  //Applies shake class if shake state equals true.\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          userMsg={this.state.userMsg}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        {this.state.cardInfo.map((cardInfo, index) => (\n          <GameCard\n            clicked={this.increment}\n            id={index}\n            key={index}\n            image={cardInfo.image}\n            isClicked={cardInfo.clicked}\n            shake={this.state.shake}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n//import Card from \"./components/card\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n//ReactDOM.render(<Score />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}